{"version":3,"sources":["app/routes.js","components/Tile/Tile.js","features/fetch.js","app/links.js","features/sportsSlice.js","features/fashionSlice.js","features/newsSlice.js","features/humorSlice.js","components/TileContainer/TileContainer.js","app/App.js","reportWebVitals.js","app/store.js","index.js"],"names":["routes","sports","fashion","humor","news","home","Tile","imageHeight","imageWidth","props","title","key","image","thumbnail","undefined","thumbnail_height","thumbnail_width","link","permalink","upvotes","ups","className","href","target","src","style","width","height","Intl","NumberFormat","format","fetchData","url","a","fetch","then","response","json","data","fetchReddits","children","oneSubreddit","push","selectPosts","postsToShow","subredditsData","i","length","idx","Math","floor","random","dataToAdd","splice","links","sportsSlice","createSlice","name","initialState","refreshPosts","reducers","setSportsPosts","state","action","payload","toggleSportsRefresh","selectSportsRefresh","actions","fashionSlice","setFashionPosts","toggleFashionRefresh","selectFashionRefresh","newsSlice","setNewsPosts","toggleNewsRefresh","selectNewsRefresh","humorSlice","setHumorPosts","toggleHumorRefresh","selectHumorRefresh","TileContainer","getNewState","whichToggle","whichRefresh","dispatch","useDispatch","getFashionPostsAsync","getNewsPostsAsync","getHumorPostsAsync","useState","posts","setPosts","useSelector","refresh","setRefresh","useEffect","document","querySelector","cursor","onClick","map","item","App","to","activeClassName","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","reducer","configureStore","ReactDOM","render","StrictMode","store","getElementById"],"mappings":"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","file":"static/js/main.834922ae.chunk.js","sourcesContent":["const routes ={\r\n    sports: () => '/sports',\r\n    fashion: () => '/fashion',\r\n    humor: () => '/humor',\r\n    news: () => '/news',\r\n    home: () => '/'\r\n}\r\n\r\nexport default routes;","import React from 'react';\r\nimport './Tile.css'\r\n\r\nexport default function Tile({props}, {key}) {\r\n    // get the necessary items from the props\r\n    const title = props.title;\r\n\r\n    // all image details\r\n    const image = props.thumbnail ? props.thumbnail : undefined;\r\n    let imageHeight;\r\n    let imageWidth;\r\n    if (image) {\r\n        imageHeight = props.thumbnail_height * 1.5;\r\n        imageWidth = props.thumbnail_width * 1.5;\r\n    }\r\n    // link to post\r\n    const link = 'https://www.reddit.com' + props.permalink\r\n    // upvotes\r\n    const upvotes = props.ups; \r\n\r\n    return (\r\n        <div className=\"tile\">\r\n            <a href={link} className='linkDiv' target='_blank'>\r\n                <h6>{title}</h6>\r\n                {image ? <img src={image} style={{width: imageWidth, height: imageHeight}}></img> : <p></p>}\r\n                <h5>upvotes: {new Intl.NumberFormat('en-IN').format(upvotes)}</h5>\r\n            </a>\r\n        </div>\r\n    )\r\n}","// file that contains functions used to fetch posts to display\r\nconst fetchData =  async (url) => {\r\n    const data = await fetch(url).then((response) => response.json());\r\n    return data;\r\n}\r\n\r\n//function to fetch multiple reddits\r\nexport const fetchReddits = async (props) => {\r\n    const children = [];\r\n\r\n    for (let url of props) {\r\n        const oneSubreddit = await fetchData(url);\r\n        children.push(oneSubreddit.data.children)\r\n    }\r\n\r\n    return children;\r\n}\r\n\r\nexport const selectPosts = async (props) => {\r\n    const postsToShow = [];\r\n    const subredditsData = await fetchReddits(props);\r\n\r\n    //while loop to select 32 posts to show\r\n    do {\r\n        for (let i = 0; i < subredditsData.length; i++) {\r\n            // guardian clause to check if the postsTo show is at 32\r\n            if (postsToShow.length === 32) {\r\n                break;\r\n            }\r\n            //get value from random index in array\r\n            let idx = Math.floor(Math.random() * subredditsData[i].length);\r\n            let dataToAdd = subredditsData[i][idx];\r\n            subredditsData[i].splice(idx, 1);\r\n            postsToShow.push(dataToAdd);\r\n        }\r\n    } while (postsToShow.length < 32);\r\n\r\n    return postsToShow;\r\n}","const sports = ['https://www.reddit.com/r/sports/hot.json', 'https://www.reddit.com/r/soccer/hot.json', 'https://www.reddit.com/r/mma/hot.json', 'https://www.reddit.com/r/football/hot.json', 'https://www.reddit.com/r/nba/hot.json']\r\nconst humor = ['https://www.reddit.com/r/ProgrammerHumor/hot.json', 'https://www.reddit.com/r/dankmemes/hot.json', 'https://www.reddit.com/r/funny/hot.json']\r\nconst news = ['https://www.reddit.com/r/news/hot.json', 'https://www.reddit.com/r/politics/hot.json']\r\nconst fashion = ['https://www.reddit.com/r/streetwear/hot.json', 'https://www.reddit.com/r/fashion/hot.json']\r\n\r\nconst links = {\r\n    sports: sports,\r\n    humor: humor,\r\n    news: news,\r\n    fashion: fashion\r\n}\r\n\r\nexport default links;","import { createSlice, createReducer  } from \"@reduxjs/toolkit\";\r\nimport links from \"../app/links\";\r\nimport { selectPosts } from \"./fetch\";\r\n\r\nexport const initialState = {\r\n    postsToShow: [],\r\n    refreshPosts: true\r\n}\r\n\r\n//slice\r\nconst sportsSlice = createSlice({\r\n    name: 'sports',\r\n    initialState: initialState,\r\n    reducers: {\r\n        setSportsPosts: (state, action) => {\r\n            state.postsToShow = action.payload;\r\n        },\r\n\r\n        toggleSportsRefresh: state => {\r\n            state.refreshPosts = state.refreshPosts ? false : true;\r\n        }\r\n    }\r\n})\r\n\r\n// await posts from the fetch, then dispatch an action to update the posts\r\nexport const getSportsPostsAsync = links => async dispatch => {\r\n    const data = await selectPosts(links);\r\n    dispatch(setSportsPosts(data));\r\n}\r\n\r\nexport const selectSportsPosts = state => state.sports.postsToShow;\r\nexport const selectSportsRefresh = state => state.sports.refreshPosts;\r\n\r\nexport const { setSportsPosts, toggleSportsRefresh } = sportsSlice.actions;\r\nexport default sportsSlice.reducer; ","import { createSlice } from \"@reduxjs/toolkit\";\r\nimport links from \"../app/links\";\r\nimport { selectPosts } from \"./fetch\";\r\n\r\nexport const initialState = {\r\n    postsToShow: [{}],\r\n    refreshPosts: true\r\n}\r\n\r\n//slice\r\nconst fashionSlice = createSlice({\r\n    name: 'fashion',\r\n    initialState: initialState,\r\n    reducers: {\r\n        setFashionPosts: (state, action) => {\r\n            state.postsToShow = action.payload\r\n        },\r\n\r\n        toggleFashionRefresh: state => {\r\n            state.refreshPosts = state.refreshPosts ? false : true;\r\n        }\r\n    }\r\n})\r\n\r\n// await posts from the fetch, then dispatch an action to update the posts\r\nexport const getFashionPostsAsync = links => async dispatch => {\r\n    const data = await selectPosts(links);\r\n    dispatch(setFashionPosts(data))\r\n}\r\n\r\nexport const selectFashionPosts = state => state.fashion.postsToShow;\r\nexport const selectFashionRefresh = state => state.fashion.refreshPosts;\r\n\r\nexport const { setFashionPosts, toggleFashionRefresh } = fashionSlice.actions;\r\nexport default fashionSlice.reducer; ","import { createSlice } from \"@reduxjs/toolkit\";\r\nimport { selectPosts } from \"./fetch\";\r\n\r\nexport const initialState = {\r\n    postsToShow: [{}],\r\n    refreshPosts: true\r\n}\r\n\r\n//slice\r\nconst newsSlice = createSlice({\r\n    name: 'news',\r\n    initialState: initialState,\r\n    reducers: {\r\n        setNewsPosts: (state, action) => {\r\n            state.postsToShow = action.payload\r\n        },\r\n\r\n        toggleNewsRefresh: state => {\r\n            state.refreshPosts = state.refreshPosts ? false : true;\r\n        }\r\n    }\r\n})\r\n\r\n// await posts from the fetch, then dispatch an action to update the posts\r\nexport const getNewsPostsAsync = links => async dispatch => {\r\n    const data = await selectPosts(links);\r\n    dispatch(setNewsPosts(data))\r\n}\r\n\r\nexport const selectNewsPosts = state => state.news.postsToShow;\r\nexport const selectNewsRefresh = state => state.news.refreshPosts;\r\n\r\nexport const { setNewsPosts, toggleNewsRefresh } = newsSlice.actions;\r\nexport default newsSlice.reducer; ","import { createSlice } from \"@reduxjs/toolkit\";\r\nimport { selectPosts } from \"./fetch\";\r\n\r\nexport const initialState = {\r\n    postsToShow: [{}],\r\n    refreshPosts: true\r\n}\r\n\r\n//slice\r\nconst humorSlice = createSlice({\r\n    name: 'humor',\r\n    initialState: initialState,\r\n    reducers: {\r\n        setHumorPosts: (state, action) => {\r\n            state.postsToShow = action.payload;\r\n        },\r\n\r\n        toggleHumorRefresh: state => {\r\n            state.refreshPosts = state.refreshPosts ? false : true;\r\n        }\r\n    }\r\n})\r\n\r\n// await posts from the fetch, then dispatch an action to update the posts\r\nexport const getHumorPostsAsync = links => async dispatch => {\r\n    const data = await selectPosts(links);\r\n    dispatch(setHumorPosts(data))\r\n}\r\n\r\nexport const selectHumorPosts = state => state.humor.postsToShow;\r\nexport const selectHumorRefresh = state => state.humor.refreshPosts;\r\n\r\nexport const { setHumorPosts, toggleHumorRefresh } = humorSlice.actions;\r\nexport default humorSlice.reducer; ","import React, { useEffect, useState } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport './TileContainer.css'\r\nimport Tile from '../Tile/Tile';\r\nimport { selectPosts } from '../../features/fetch';\r\nimport links from '../../app/links';\r\nimport { getSportsPostsAsync, selectSportsPosts, selectSportsRefresh, toggleSportsRefresh } from '../../features/sportsSlice';\r\nimport { getFashionPostsAsync, selectFashionPosts, selectFashionRefresh, toggleFashionRefresh } from '../../features/fashionSlice';\r\nimport { getNewsPostsAsync, selectNewsPosts, selectNewsRefresh, toggleNewsRefresh } from '../../features/newsSlice';\r\nimport { getHumorPostsAsync, selectHumorPosts, selectHumorRefresh, toggleHumorRefresh } from '../../features/humorSlice';\r\n\r\nexport default function TileContainer({props}) {\r\n    // will dispatch to the store to update the json based on a button\r\n    const dispatch = useDispatch();\r\n\r\n    // determining which slice to pull data from\r\n    let getNewState;\r\n    let whichToggle;\r\n    let whichRefresh;\r\n    switch (props) {\r\n        case links.sports:\r\n           getNewState = getSportsPostsAsync(links.sports);\r\n           whichToggle = toggleSportsRefresh;\r\n           whichRefresh = selectSportsRefresh;\r\n           break;\r\n        case links.fashion:\r\n            getNewState = getFashionPostsAsync(links.fashion);\r\n            whichToggle = toggleFashionRefresh;\r\n            whichRefresh = selectFashionRefresh;\r\n           break;\r\n        case links.news:\r\n            getNewState = getNewsPostsAsync(links.news);\r\n            whichToggle = toggleNewsRefresh;\r\n            whichRefresh = selectNewsRefresh;\r\n            break; \r\n        case links.humor:\r\n            getNewState = getHumorPostsAsync(links.humor);\r\n            whichToggle = toggleHumorRefresh;\r\n            whichRefresh = selectHumorRefresh;\r\n            break; \r\n        default: \r\n            getNewState = 'error'\r\n            whichToggle = 'error'\r\n            break;\r\n    }\r\n\r\n    //loading posts on the switch\r\n    const [posts, setPosts] = useState(undefined);\r\n    const [refresh, setRefresh] = useState(useSelector(whichRefresh))\r\n\r\n    // function to toggle refresh which will update the posts\r\n    const toggleRefesh = () => {\r\n        const bool = refresh ? false : true;\r\n        setRefresh(bool)\r\n        dispatch(whichToggle)\r\n    }\r\n\r\n    //using selectposts to set the state of the posts\r\n    useEffect(async () => {\r\n        document.querySelector('*').style.cursor = 'wait'\r\n        const data = await selectPosts(props);\r\n        dispatch(getNewState)\r\n        dispatch(whichToggle)\r\n        setPosts(data)\r\n        document.querySelector('*').style.cursor = ''\r\n    }, [props, refresh])\r\n\r\n\r\n    if (posts) {\r\n        return (\r\n            <div className = 'genreContainer'>\r\n                <button onClick={() => toggleRefesh()}>refresh posts</button>\r\n                <div className= 'TileContainer'>\r\n                    {posts.map((item, idx) => {\r\n                        return <Tile props={item.data} key={idx}/>\r\n                    })}\r\n                </div>\r\n            </div>\r\n        )\r\n\r\n    } else {\r\n        return null;\r\n    } \r\n}","import './App.css';\r\nimport React from 'react';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  NavLink,\r\n} from \"react-router-dom\";\r\nimport routes from './routes'\r\nimport TileContainer from '../components/TileContainer/TileContainer'\r\nimport links from './links'\r\n\r\nfunction App() {\r\n  return (\r\n    <Router>\r\n      <nav>\r\n        <ul>\r\n          <li>\r\n            <NavLink to={routes.sports()} activeClassName=\"active\">\r\n              Sports\r\n            </NavLink>\r\n          </li>\r\n          <li>\r\n            <NavLink to={routes.fashion()} activeClassName=\"active\">\r\n              Fashion\r\n            </NavLink>\r\n          </li>\r\n          <li>\r\n            <NavLink to={routes.news()} activeClassName=\"active\">\r\n              News\r\n            </NavLink>\r\n          </li>\r\n          <li>\r\n            <NavLink to={routes.humor()} activeClassName=\"active\">\r\n              Humor\r\n            </NavLink>\r\n          </li>\r\n        </ul>\r\n      </nav>\r\n\r\n      <Switch>\r\n        <Route path='/sports'>\r\n          <TileContainer props={links.sports} />\r\n        </Route>\r\n        <Route path='/fashion'>\r\n          <TileContainer props={links.fashion} />\r\n        </Route>\r\n        <Route path='/news'>\r\n          <TileContainer props={links.news} />\r\n        </Route>\r\n        <Route path='/humor'>\r\n          <TileContainer props={links.humor} />\r\n        </Route>\r\n        <Route path='/'>\r\n        </Route>\r\n      </Switch>\r\n    </Router>\r\n\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport sportsSlice from '../features/sportsSlice';\r\nimport humorSlice from '../features/humorSlice';\r\nimport newsSlice from '../features/newsSlice';\r\nimport fashionSlice from '../features/fashionSlice';\r\n\r\nconst reducer = {\r\n    sports: sportsSlice,\r\n    humor: humorSlice,\r\n    news: newsSlice,\r\n    fashion: fashionSlice\r\n}\r\n\r\nexport default configureStore({\r\n    reducer: reducer\r\n})","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './app/App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { Provider } from 'react-redux'\r\nimport store from './app/store'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}